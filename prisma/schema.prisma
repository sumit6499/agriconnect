generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  role      UserRole  @default(FARMER)
  pmKisanId String?    @map("pmkisan_id") 
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  orders    Order[]
  reviews   Review[]
  @@index([name,email])
}

model Product {
  id             String      @id @default(cuid())
  name           String
  description    String
  price          Float
  predictedPrice Float       @map("predicted_price")
  quantity       Int
  unit           String
  category       String
  location       Location?
  imageUrl       String?
  farmerId       String
  farmer         User        @relation(fields: [farmerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  orderItems     OrderItem[]
  reviews        Review[]
  @@index([name,predictedPrice])
}

model Order {
  id          String      @id @default(cuid())
  buyerId     String
  buyer       User        @relation(fields: [buyerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status      OrderStatus @default(PENDING)
  totalAmount Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       OrderItem[]
  @@index([totalAmount])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quantity  Int
  price     Float
  @@index([price])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  @@index([rating])
}

model Location {
  id        String  @id @default(cuid())
  latitude  Float
  longitude Float
  address   String
  productId String  @unique
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@index([latitude,longitude])
}

enum UserRole {
  FARMER
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}
